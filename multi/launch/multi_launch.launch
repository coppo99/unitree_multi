<?xml version="1.0"?>
<launch>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="enable_state_estimator" default="false" />
  <arg name="paused" value="false"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="false"/>
  <arg name="csvFilesStoring" default="false"/>
  <arg name="csvFilesStoringTime" default="15.0"/>
  <arg name="verbose" default="false"/>
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0"/>
  <arg name="user_account" default="mattia"/>
  <arg name="rvizconfig" default="$(find multi)/config/unitree_a1.rviz" />
  <!--=======================-->
  <!-- Empty world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find a1_gazebo)/launch/world/empty.world"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>
  <!--=======================-->
  <group ns="a1_gazebo">
    <!-- <param name="tf_prefix" value="a1_tf" /> -->
    <rosparam file="$(find a1_gazebo)/config/controllers.yaml" command="load" ns="/a1_gazebo"/>
    <!-- Robot -->

    <param name="robot_description" textfile="$(find a1_description)/urdf/a1.urdf"/>
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" />

    <arg name="robot" default="$(find a1_description)/urdf/a1.urdf"/>
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg robot)"/>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
          args="-x $(arg initial_pose_x)
                -y $(arg initial_pose_y)
                -Y $(arg initial_pose_a)
                -param robot_description
                -urdf
                -model a1_gazebo"/>
    <!-- Robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher" respawn="false" output="screen">
      <remap from="/joint_states" to="/a1_gazebo/joint_states" />
      <param name="publish_frequency" type="double" value="40" />
    </node>
    <!-- Controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen"
          args="FR_hip_joint FR_thigh_joint FR_calf_joint
                FL_hip_joint FL_thigh_joint FL_calf_joint
                RR_hip_joint RR_thigh_joint RR_calf_joint
                RL_hip_joint RL_thigh_joint RL_calf_joint"/>
  </group>
  <!--=======================-->
  <group ns="ar_drone">
    <!-- send robot urdf to param server -->
    <param name="robot_description" command="cat '$(find sjtu_drone)/urdf/sjtu_drone.urdf'" />

    <!-- push robot_description to factory and spawn robot in gazebo at the origin, change x,y,z arguments to spawn in a different position -->
    <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model sjtu_drone -x 0 -y 1 -z 0"
      respawn="false" output="screen" />
  </group>
  <!--=======================-->
  <node name="world_br" pkg="multi" type="world_br" output="screen" />
  <!-- <node name="path_visualizer" pkg="multi" type="path_visualizer" output="screen" /> -->
  <node name="obstacles_generator" pkg="multi" type="obstacles_generator" output="screen" />
  <!--=======================-->
  <!-- <group ns="$(arg mav_name)">
  The following lines simulate the Crazyflie dynamics
    <include file="$(find rotors_gazebo)/launch/spawn_mav_crazyflie.launch">
      <arg name="z" value="0.0"/>
      <arg name="y" value="0.5"/>
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="enable_state_estimator" value="$(arg enable_state_estimator)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
    The Crazyflie position controller
    <node name="position_controller_node" pkg="rotors_control" type="position_controller_node" output="screen">
        <param name="enable_state_estimator" value="$(arg enable_state_estimator)" />
        <param name="csvFilesStoring" value="$(arg csvFilesStoring)"/>
        <param name="csvFilesStoringTime" value="$(arg csvFilesStoringTime)"/>
        <param name="user_account" value="$(arg user_account)"/>
        <rosparam unless="$(arg enable_state_estimator)" command="load" file="$(find rotors_gazebo)/resource/controller_$(arg mav_name).yaml" />
        <rosparam if="$(arg enable_state_estimator)" command="load" file="$(find rotors_gazebo)/resource/controller_$(arg mav_name)_with_stateEstimator.yaml" />
        <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <node name="quaternion_to_rpy" pkg="rotors_gazebo" type="quaternion_to_rpy" output="screen" >
        <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
  </group> -->
</launch>
